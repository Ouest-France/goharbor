// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteRepositoriesRepoNameParams creates a new DeleteRepositoriesRepoNameParams object
// with the default values initialized.
func NewDeleteRepositoriesRepoNameParams() *DeleteRepositoriesRepoNameParams {
	var ()
	return &DeleteRepositoriesRepoNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteRepositoriesRepoNameParamsWithTimeout creates a new DeleteRepositoriesRepoNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteRepositoriesRepoNameParamsWithTimeout(timeout time.Duration) *DeleteRepositoriesRepoNameParams {
	var ()
	return &DeleteRepositoriesRepoNameParams{

		timeout: timeout,
	}
}

// NewDeleteRepositoriesRepoNameParamsWithContext creates a new DeleteRepositoriesRepoNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteRepositoriesRepoNameParamsWithContext(ctx context.Context) *DeleteRepositoriesRepoNameParams {
	var ()
	return &DeleteRepositoriesRepoNameParams{

		Context: ctx,
	}
}

// NewDeleteRepositoriesRepoNameParamsWithHTTPClient creates a new DeleteRepositoriesRepoNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteRepositoriesRepoNameParamsWithHTTPClient(client *http.Client) *DeleteRepositoriesRepoNameParams {
	var ()
	return &DeleteRepositoriesRepoNameParams{
		HTTPClient: client,
	}
}

/*DeleteRepositoriesRepoNameParams contains all the parameters to send to the API endpoint
for the delete repositories repo name operation typically these are written to a http.Request
*/
type DeleteRepositoriesRepoNameParams struct {

	/*RepoName
	  The name of repository which will be deleted.

	*/
	RepoName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete repositories repo name params
func (o *DeleteRepositoriesRepoNameParams) WithTimeout(timeout time.Duration) *DeleteRepositoriesRepoNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete repositories repo name params
func (o *DeleteRepositoriesRepoNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete repositories repo name params
func (o *DeleteRepositoriesRepoNameParams) WithContext(ctx context.Context) *DeleteRepositoriesRepoNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete repositories repo name params
func (o *DeleteRepositoriesRepoNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete repositories repo name params
func (o *DeleteRepositoriesRepoNameParams) WithHTTPClient(client *http.Client) *DeleteRepositoriesRepoNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete repositories repo name params
func (o *DeleteRepositoriesRepoNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRepoName adds the repoName to the delete repositories repo name params
func (o *DeleteRepositoriesRepoNameParams) WithRepoName(repoName string) *DeleteRepositoriesRepoNameParams {
	o.SetRepoName(repoName)
	return o
}

// SetRepoName adds the repoName to the delete repositories repo name params
func (o *DeleteRepositoriesRepoNameParams) SetRepoName(repoName string) {
	o.RepoName = repoName
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteRepositoriesRepoNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param repo_name
	if err := r.SetPathParam("repo_name", o.RepoName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
